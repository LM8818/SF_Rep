#!/usr/bin/env python3
"""
–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ NLP –ø—Ä–æ–µ–∫—Ç–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã
"""

import os
import sys
import subprocess
import venv
import shutil
from pathlib import Path
from setuptools import setup, find_packages, Command
from setuptools.command.install import install

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).parent
VENV_NAME = "banking_nlp_env"
VENV_PATH = PROJECT_ROOT / VENV_NAME
REQUIREMENTS_FILE = PROJECT_ROOT / "requirements.txt"

class CustomInstallCommand(install):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã"""
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        print("üè¶ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ NLP –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
        self.check_python_version()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
        self.create_virtual_environment()
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.install_dependencies()
        
        # –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ setuptools
        install.run(self)
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        self.run_verification_tests()
        
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ NLP –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    def check_python_version(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        version = sys.version_info
        if version.major != 3 or version.minor < 8:
            raise RuntimeError("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è")

    def create_virtual_environment(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã"""
        if VENV_PATH.exists():
            print(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã: {VENV_PATH}")
            shutil.rmtree(VENV_PATH)
        
        print(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã: {VENV_PATH}")
        venv.create(VENV_PATH, with_pip=True, clear=True)
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    def install_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Ä–µ–¥—É"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ
        if os.name == 'nt':  # Windows
            python_executable = VENV_PATH / "Scripts" / "python.exe"
            pip_executable = VENV_PATH / "Scripts" / "pip.exe"
        else:  # Unix/Linux/macOS
            python_executable = VENV_PATH / "bin" / "python"
            pip_executable = VENV_PATH / "bin" / "pip"
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
        subprocess.run([str(python_executable), "-m", "pip", "install", "--upgrade", "pip"], 
                      check=True)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt
        if REQUIREMENTS_FILE.exists():
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ requirements.txt...")
            subprocess.run([str(pip_executable), "install", "-r", str(REQUIREMENTS_FILE)], 
                          check=True)
        else:
            print("‚ö†Ô∏è  –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
            self.install_basic_dependencies(str(pip_executable))
        
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    def install_basic_dependencies(self, pip_executable):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –µ—Å–ª–∏ requirements.txt –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"""
        basic_deps = [
            "pymorphy2>=0.9.1",
            "pymorphy2-dicts-ru>=2.4.417127.4579844",
            "transformers>=4.35.0",
            "torch>=2.0.0",
            "pandas>=2.0.0",
            "numpy>=1.24.0",
            "scikit-learn>=1.3.0",
            "pyyaml>=6.0.0",
            "nltk>=3.8.1"
        ]
        
        for dep in basic_deps:
            print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}...")
            subprocess.run([pip_executable, "install", dep], check=True)

    def run_verification_tests(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ
        if os.name == 'nt':  # Windows
            python_executable = VENV_PATH / "Scripts" / "python.exe"
        else:  # Unix/Linux/macOS
            python_executable = VENV_PATH / "bin" / "python"
        
        print("üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        self.test_basic_imports(str(python_executable))
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.test_configuration(str(python_executable))
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        self.test_text_processing(str(python_executable))
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    def test_basic_imports(self, python_executable):
        """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
        test_script = '''
import sys
print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")

try:
    import pymorphy2
    print("‚úÖ pymorphy2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pymorphy2: {e}")
    sys.exit(1)

try:
    import transformers
    print("‚úÖ transformers –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ transformers: {e}")
    sys.exit(1)

try:
    import pandas
    print("‚úÖ pandas –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pandas: {e}")
    sys.exit(1)

print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
'''
        subprocess.run([python_executable, "-c", test_script], check=True)

    def test_configuration(self, python_executable):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        test_script = f'''
import sys
import os
sys.path.insert(0, r"{PROJECT_ROOT}")

print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

try:
    from utils.config import config
    print("‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    model_name = config.get('model.base_model', 'default')
    print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {{model_name}}")
    
    batch_size = config.get('model.batch_size', 32)
    print(f"‚úÖ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {{batch_size}}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {{e}}")
    sys.exit(1)

print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
'''
        subprocess.run([python_executable, "-c", test_script], check=True)

    def test_text_processing(self, python_executable):
        """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        test_script = f'''
import sys
sys.path.insert(0, r"{PROJECT_ROOT}")

print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞...")

try:
    from core.data_processing.preprocessors import BankingTextPreprocessor
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    preprocessor = BankingTextPreprocessor()
    print("‚úÖ –ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω")
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    test_text = "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∫–∞—Ä—Ç—É —Å –Ω–æ–º–µ—Ä–æ–º 1234-5678-9012-3456"
    processed_text = preprocessor.preprocess(test_text)
    
    if processed_text:
        print(f"‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {{processed_text[:50]}}...")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞")
        sys.exit(1)
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {{e}}")
    sys.exit(1)

print("‚úÖ –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
'''
        subprocess.run([python_executable, "-c", test_script], check=True)


class TestCommand(Command):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    description = '–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞'
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ
        if os.name == 'nt':  # Windows
            python_executable = VENV_PATH / "Scripts" / "python.exe"
        else:  # Unix/Linux/macOS
            python_executable = VENV_PATH / "bin" / "python"
        
        if not python_executable.exists():
            print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python setup.py install")
            return
        
        print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        test_files = [
            "test_step1.py",
            "test_preprocessing.py"
        ]
        
        for test_file in test_files:
            test_path = PROJECT_ROOT / test_file
            if test_path.exists():
                print(f"üîç –ó–∞–ø—É—Å–∫ {test_file}...")
                try:
                    subprocess.run([str(python_executable), str(test_path)], 
                                 check=True, cwd=str(PROJECT_ROOT))
                    print(f"‚úÖ {test_file} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except subprocess.CalledProcessError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {test_file}")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")


class CleanCommand(Command):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    description = '–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã'
    user_options = []

    def initialize_options(self):
        pass

    def finalize_options(self):
        pass

    def run(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã
        if VENV_PATH.exists():
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥—ã: {VENV_PATH}")
            shutil.rmtree(VENV_PATH)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–µ—à–∞ Python
        cache_dirs = [
            PROJECT_ROOT / "__pycache__",
            PROJECT_ROOT / "core" / "__pycache__",
            PROJECT_ROOT / "utils" / "__pycache__",
            PROJECT_ROOT / "build",
            PROJECT_ROOT / "dist",
            PROJECT_ROOT / "*.egg-info"
        ]
        
        for cache_dir in cache_dirs:
            if cache_dir.exists():
                if cache_dir.is_dir():
                    shutil.rmtree(cache_dir)
                else:
                    cache_dir.unlink()
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è setuptools
setup(
    name="banking-nlp",
    version="1.0.0",
    description="–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ NLP –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤",
    long_description=open("README.md", "r", encoding="utf-8").read() if Path("README.md").exists() else "",
    long_description_content_type="text/markdown",
    author="Banking NLP Team",
    author_email="banking-nlp@example.com",
    url="https://github.com/your-org/banking-nlp",
    packages=find_packages(),
    python_requires=">=3.8",
    install_requires=[
        "pymorphy2>=0.9.1",
        "pymorphy2-dicts-ru>=2.4.417127.4579844",
        "transformers>=4.35.0",
        "torch>=2.0.0",
        "pandas>=2.0.0",
        "numpy>=1.24.0",
        "scikit-learn>=1.3.0",
        "pyyaml>=6.0.0",
        "nltk>=3.8.1",
        "tqdm>=4.65.0"
    ],
    extras_require={
        "dev": [
            "pytest>=7.4.0",
            "pytest-cov>=4.1.0",
            "black>=23.7.0",
            "flake8>=6.0.0"
        ]
    },
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: Financial and Insurance Industry",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
    ],
    cmdclass={
        'install': CustomInstallCommand,
        'test': TestCommand,
        'clean': CleanCommand,
    },
    entry_points={
        'console_scripts': [
            'banking-nlp-analyze=pipelines.inference:main',
            'banking-nlp-train=pipelines.training:main',
        ],
    },
    include_package_data=True,
    package_data={
        'configs': ['*.yaml', '*.yml'],
        'data': ['*.txt', '*.csv'],
    },
)
